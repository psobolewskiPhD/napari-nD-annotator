# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: tests

on:
  push:
    branches:
      - main
      - npe2
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
      - npe2
  workflow_dispatch:

jobs:
  build_wheels_macos:
    name: Build wheels on MacOS
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14]
        arch:
          - x86_64
          - arm64
    steps:
      - uses: actions/checkout@v3

      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: "3.9"

      - name: Install dependencies from conda-forge
        run: |
          conda config --add channels conda-forge
          conda config --set channel_priority strict
          conda install -y libomp cmake delocate

      - name: Set environment variables for OpenMP from conda-forge
        run: |
          export OMP_PREFIX=$(conda info --base)/envs/${{ matrix.arch }}/lib
          echo "OMP_PREFIX=$OMP_PREFIX"
        env:
          CC: /usr/bin/clang
          CXX: /usr/bin/clang++
          CPPFLAGS: "-Xpreprocessor -fopenmp"
          CFLAGS: "-I${{ env.OMP_PREFIX }}/include"
          LDFLAGS: "-L${{ env.OMP_PREFIX }}/lib"
          DYLD_LIBRARY_PATH: "${{ env.OMP_PREFIX }}/lib"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.2
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
          CIBW_SKIP: "pp*"
          CIBW_CONFIG_SETTINGS: "--only-binary=scipy"
          CC: /usr/bin/clang
          CXX: /usr/bin/clang++
          CPPFLAGS: "-Xpreprocessor -fopenmp"
          CFLAGS: "-I${{ env.OMP_PREFIX }}/include"
          LDFLAGS: "-L${{ env.OMP_PREFIX }}/lib"
          DYLD_LIBRARY_PATH: "${{ env.OMP_PREFIX }}/lib"

          # Conditionally set MACOSX_DEPLOYMENT_TARGET for arm64 builds only
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.arch == 'arm64' && '13.0' || '' }}

      - name: Fix external dependencies with delocate
        run: |
          delocate-wheel ./wheelhouse/*.whl

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_wheels_linux:
    name: Build wheels on Linux
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_SKIP: "pp* cp310-*i686 *musllinux* *s390x* *ppc64le*"
          CIBW_CONFIG_SETTINGS: "--only-binary=scipy"
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_wheels_windows:
    name: Build wheels on Windows
    runs-on: windows-2019
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_SKIP: "cp310-win32 pp*"
          CIBW_CONFIG_SETTINGS: "--only-binary=scipy"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels_macos, build_wheels_linux, build_wheels_windows, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          password: ${{ secrets.TWINE_API_KEY }}
          skip_existing: true
          # To test: repository_url: https://test.pypi.org/legacy/
